package twitter

import play.api.libs.json.JsValue
import twitter4j._
import twitter4j.conf.ConfigurationBuilder
import twitter4j.TwitterStreamFactory
import play.api.libs.json._


import scala.io.Source

// import scala.collection.mutable.ArrayBuffer

object TwitterAccess {

  def main(args: Array[String]) {
    // Open JSON File
    val path = "C:\\Users\\KathrinNetzer\\Desktop\\twitter\\src\\twitter\\Statements.json"
    val tweetsJsonString = Source.fromFile(path).getLines.mkString
    val tweetsJsonFile = Json.parse(tweetsJsonString)
    val statements = tweetsJsonFile.\\("data")

    // Settings for the registered application
    val consumerKey = "DG7mPrtNYG4zkOWi31JC7ZZXH"
    val consumerSecret = "WBIzuPNnqNPIEAcHphdD1t0kILdLDRUwKNZOKEuPd85mI28HjH"
    val accessToken = "4874134271-uRS80fyMpmOUeUz4pKvyk077DHNcUTerKJjuzAm"
    val accessTokenSecret = "PRA5GqEsNDeL2uZ4MyB1qx0mINMO4istb6aHczQmy69Nf"

    val settings = new ConfigurationBuilder()
    settings.setDebugEnabled(true)
      .setOAuthConsumerKey(consumerKey)
      .setOAuthConsumerSecret(consumerSecret)
      .setOAuthAccessToken(accessToken)
      .setOAuthAccessTokenSecret(accessTokenSecret)

    /**
    // get from twitter without having a stream
    val factory = new TwitterFactory(settings.build())
    val twitter = factory.getInstance()

    val posts = Array(twitter.getHomeTimeline())

    for (i <- 0 to (posts.length -1)){
      println(posts(i))
    }
    **/

    //val hashtags = Array("trump", "germany", "merkel")
    val streamFactory = new TwitterStreamFactory(settings.build()).getInstance
    streamFactory.addListener(getPosts(statements))
    val politicalFilter = new FilterQuery()
    //  follow - Specifies the users, by ID, to receive public tweets from.
    //
    politicalFilter.follow(25073877, 813286, 1339835893, 23022687, 939091, 18916432,
      15808765, 36412963, 36042554, 14224719, 24705126, 20713061, 15416505,
      65493023, 733751245, 490126636, 19394188, 34996429, 7334402, 12044602,
      15762708, 28587919, 16832632, 138787319, 135815730, 121887978, 113420831,
      101782947, 78431501, 82939583, 70188601, 65691824, 62442994, 55235265,
      50982086, 45835766, 44335525, 33576489)

    //politicalFilter.track("elections", "politics", "trump", "america", "democrats",
    //"obama", "republicans")
    //politicalFilter.filterLevel("medium")
    //politicalFilter.language("en")
    println(politicalFilter)
    streamFactory.filter(politicalFilter)

    /**
      * Twitter Stream:
      * The Thread is important, because the Stream has to be running all the time.
      */

    val streamingThread = new Thread(new Runnable {
      override def run(): Unit = {
        while (!Thread.currentThread().isInterrupted()) {
          //streamFactory.sample()
          print("*******************************")
          Thread.sleep(10000) // important: not too low!
          streamFactory.cleanUp()
          streamFactory.shutdown()
      }}
    })
    streamingThread.run()
  }
  def getPosts(statements: Seq[JsValue]) = new StatusListener() {
    def onStatus(status: Status) {
      println(status.getUser)
      println(status.getText)
      println(status.getCreatedAt)
      println("******************************************")
      // Add to json
      val tweetJson: JsValue = JsObject(Seq(
        "type" -> JsString("statement"),
        "message" -> JsString(status.getText),
        "userid" -> JsNumber(status.getUser.getId),
        "name" -> JsString(status.getUser.getName),
        "screenname" -> JsString(status.getUser.getScreenName),
        "pictureurl" -> JsString(status.getUser.getProfileImageURL),
        "creaded_at" -> JsString(status.getCreatedAt.toString),
        "id" -> JsNumber(status.getId)
      ))
      //return statements :+ tweetJson
    }

    def onDeletionNotice(statusDeletionNotice: StatusDeletionNotice) {}
    def onTrackLimitationNotice(numberOfLimitedStatuses: Int) {}
    def onException(ex: Exception) { ex.printStackTrace }
    def onScrubGeo(arg0: Long, arg1: Long) {}
    def onStallWarning(warning: StallWarning) {}
  }

}




{
  "data": [
    {
      "type": "statement",
      "message": "example tweet",
      "userid": "example_user",
      "name": "example_username",
      "screenname": "example_screenname",
      "pictureurl": "",
      "created_at": "",
      "id": 1
    }
  ]
}